// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlahServiceClient is the client API for BlahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlahServiceClient interface {
	GetBlah(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*MyResponse, error)
}

type blahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlahServiceClient(cc grpc.ClientConnInterface) BlahServiceClient {
	return &blahServiceClient{cc}
}

func (c *blahServiceClient) GetBlah(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*MyResponse, error) {
	out := new(MyResponse)
	err := c.cc.Invoke(ctx, "/pb.BlahService/GetBlah", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlahServiceServer is the server API for BlahService service.
// All implementations must embed UnimplementedBlahServiceServer
// for forward compatibility
type BlahServiceServer interface {
	GetBlah(context.Context, *MyRequest) (*MyResponse, error)
	mustEmbedUnimplementedBlahServiceServer()
}

// UnimplementedBlahServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlahServiceServer struct {
}

func (UnimplementedBlahServiceServer) GetBlah(context.Context, *MyRequest) (*MyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlah not implemented")
}
func (UnimplementedBlahServiceServer) mustEmbedUnimplementedBlahServiceServer() {}

// UnsafeBlahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlahServiceServer will
// result in compilation errors.
type UnsafeBlahServiceServer interface {
	mustEmbedUnimplementedBlahServiceServer()
}

func RegisterBlahServiceServer(s grpc.ServiceRegistrar, srv BlahServiceServer) {
	s.RegisterService(&BlahService_ServiceDesc, srv)
}

func _BlahService_GetBlah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlahServiceServer).GetBlah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlahService/GetBlah",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlahServiceServer).GetBlah(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlahService_ServiceDesc is the grpc.ServiceDesc for BlahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BlahService",
	HandlerType: (*BlahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlah",
			Handler:    _BlahService_GetBlah_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blah.proto",
}
